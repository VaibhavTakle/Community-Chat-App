{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","analytics","SignIn","className","onClick","provider","GoogleAuthProvider","signInWithPopup","style","align","SignOut","currentUser","ChatRoom","dummy","useRef","messagesRef","collection","query","orderBy","limit","useCollectionData","idField","messages","useState","formValue","setFormValue","sendMessage","e","a","preventDefault","uid","photoURL","add","text","createdAt","FieldValue","serverTimestamp","current","scrollIntoView","behavior","map","msg","ChatMessage","message","id","ref","onSubmit","value","onChange","target","placeholder","type","disabled","props","messageClass","src","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTASAA,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,6DACbC,UAAW,yBACXC,cAAe,qCACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAGjB,IAAMC,EAAOV,IAASU,OAChBC,EAAYX,IAASW,YACTX,IAASY,YAgB3B,SAASC,IAKP,OACE,qCACE,wBAAQC,UAAU,UAAUC,QANP,WACvB,IAAMC,EAAW,IAAIhB,IAASU,KAAKO,mBACnCP,EAAKQ,gBAAgBF,IAInB,iCAGA,mBAAGG,MAAO,CAACC,MAAQ,UAAnB,wFAON,SAASC,IACP,OACEX,EAAKY,aACH,yBAAQR,UAAU,WAAWC,QAAS,kBAAML,EAAKW,WAAjD,UACG,IADH,cAQN,SAASE,IACP,IAAMC,EAAQC,mBAERC,EAAcf,EAAUgB,WAAW,YACnCC,EAAQF,EAAYG,QAAQ,aAAaC,MAAM,IAJnC,EAKCC,YAAkBH,EAAO,CAAEI,QAAS,OAAhDC,EALW,sBAMgBC,mBAAS,IANzB,mBAMXC,EANW,KAMAC,EANA,KAQZC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DAClBD,EAAEE,iBADgB,EAEQ9B,EAAKY,YAAvBmB,EAFU,EAEVA,IAAKC,EAFK,EAELA,SAFK,SAIZhB,EAAYiB,IAAI,CACpBC,KAAMT,EACNU,UAAW7C,IAASW,UAAUmC,WAAWC,kBACzCN,MACAC,aARgB,OAWlBN,EAAa,IAEbZ,EAAMwB,QAAQC,eAAe,CAAEC,SAAU,WAbvB,2CAAH,sDAgBjB,OACE,qCACE,iCACGjB,GACCA,EAASkB,KAAI,SAACC,GAAD,OAAS,cAACC,EAAD,CAA0BC,QAASF,GAAjBA,EAAIG,OAC9C,sBAAMC,IAAKhC,OAGb,uBAAMiC,SAAUpB,EAAhB,UACE,uBACEqB,MAAOvB,EACPwB,SAAU,SAACrB,GAAD,OAAOF,EAAaE,EAAEsB,OAAOF,QACvCG,YAAY,qBAEd,wBAAQC,KAAK,SAASC,UAAW5B,EAAjC,wBAQR,SAASkB,EAAYW,GAAQ,IAAD,EACMA,EAAMV,QAA9BV,EADkB,EAClBA,KAAMH,EADY,EACZA,IAAKC,EADO,EACPA,SACbuB,EAAexB,IAAQ/B,EAAKY,YAAYmB,IAAM,OAAS,WAE7D,OACE,sBAAK3B,UAAS,kBAAamD,GAA3B,UACE,qBACEC,IACExB,GAAY,0DAGhB,4BAAIE,OAIKuB,MAvGf,WAAgB,IAAD,EACEC,YAAa1D,GAArB2D,EADM,oBAGb,OACE,sBAAKvD,UAAU,MAAf,UACE,mCACE,0CACA,cAACO,EAAD,OAEF,kCAAUgD,EAAO,cAAC9C,EAAD,IAAe,cAACV,EAAD,UCrBvByD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1ac057c6.chunk.js","sourcesContent":["import \"./App.css\";\nimport firebase from \"firebase/app\";\nimport React, { useRef, useState } from \"react\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/analytics\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCAuUWqcRnKH6j_KK7REPKdHxt5-cHKOT8\",\n  authDomain: \"chat-application-27f69.firebaseapp.com\",\n  databaseURL: \"https://chat-application-27f69-default-rtdb.firebaseio.com\",\n  projectId: \"chat-application-27f69\",\n  storageBucket: \"chat-application-27f69.appspot.com\",\n  messagingSenderId: \"10362500118\",\n  appId: \"1:10362500118:web:cd2f17346d742293a83137\",\n  measurementId: \"G-RJ4E2K1DTM\",\n});\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Chat App</h1>\n        <SignOut />\n      </header>\n      <section>{user ? <ChatRoom /> : <SignIn />}</section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>\n        Sign in with Google\n      </button>\n      <p style={{align : 'center'}}>\n        Do not violate the community guidelines or you will be banned for life!\n      </p>\n    </>\n  );\n}\n\nfunction SignOut() {\n  return (\n    auth.currentUser && (\n      <button className=\"sign-out\" onClick={() => auth.SignOut()}>\n        {\" \"}\n        Sign Out\n      </button>\n    )\n  );\n}\n\nfunction ChatRoom() {\n  const dummy = useRef();\n\n  const messagesRef = firestore.collection(\"messages\");\n  const query = messagesRef.orderBy(\"createdAt\").limit(25);\n  const [messages] = useCollectionData(query, { idField: \"id\" });\n  const [formValue, setFormValue] = useState(\"\");\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL,\n    });\n\n    setFormValue(\"\");\n\n    dummy.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <>\n      <main>\n        {messages &&\n          messages.map((msg) => <ChatMessage key={msg.id} message={msg} />)}\n        <span ref={dummy}></span>\n      </main>\n\n      <form onSubmit={sendMessage}>\n        <input\n          value={formValue}\n          onChange={(e) => setFormValue(e.target.value)}\n          placeholder=\"Send message....\"\n        />\n        <button type=\"submit\" disabled={!formValue}>\n          Send\n        </button>\n      </form>\n    </>\n  );\n}\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n  const messageClass = uid === auth.currentUser.uid ? \"sent\" : \"received\";\n\n  return (\n    <div className={`message ${messageClass}`}>\n      <img\n        src={\n          photoURL || \"https://api.adorable.io/avatars/23/abott@adorable.png\"\n        }\n      />\n      <p>{text}</p>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}